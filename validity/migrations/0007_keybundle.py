# Generated by Django 4.2.7 on 2023-12-03 20:00

from django.db import migrations, models
import taggit.managers
import utilities.json
import validity.models.base
import validity.utils.dbfields
from django.utils.translation import gettext_lazy as _


def create_cf(apps, schema_editor):
    ContentType = apps.get_model("contenttypes", "ContentType")
    CustomField = apps.get_model("extras", "CustomField")
    KeyBundle = apps.get_model("validity", "KeyBundle")
    Device = apps.get_model("dcim", "Device")
    DeviceType = apps.get_model("dcim", "DeviceType")
    Manufacturer = apps.get_model("dcim", "Manufacturer")
    db_alias = schema_editor.connection.alias

    cf = CustomField.objects.using(db_alias).create(
        name="keybundle",
        label=_("Key Bundle"),
        description=_("Required by Validity. Defines properties of device connection"),
        type="object",
        object_type=ContentType.objects.get_for_model(KeyBundle),
        required=False,
    )
    cf.content_types.set(
        [
            ContentType.objects.get_for_model(Device),
            ContentType.objects.get_for_model(DeviceType),
            ContentType.objects.get_for_model(Manufacturer),
        ]
    )


def delete_cf(apps, schema_editor):
    CustomField = apps.get_model("extras", "CustomField")
    db_alias = schema_editor.connection.alias
    CustomField.objects.using(db_alias).filter(name="keybundle").delete()


class Migration(migrations.Migration):
    dependencies = [
        ("extras", "0098_webhook_custom_field_data_webhook_tags"),
        ("validity", "0006_script_change"),
    ]

    operations = [
        migrations.CreateModel(
            name="KeyBundle",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("connection_type", models.CharField(max_length=50)),
                ("public_credentials", models.JSONField(blank=True, default=dict)),
                ("private_credentials", validity.utils.dbfields.EncryptedDictField(blank=True)),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ("name",),
            },
            bases=(validity.models.base.URLMixin, models.Model),
        ),
        migrations.RunPython(create_cf, delete_cf),
    ]
