# Generated by Django 4.2.11 on 2024-12-23 23:44

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json
import validity.fields.encrypted
import validity.models.base


class Migration(migrations.Migration):

    dependencies = [
        ('extras', '0107_cachedvalue_extras_cachedvalue_object'),
        ('validity', '0011_delete_scripts'),
    ]

    operations = [
        migrations.CreateModel(
            name='BackupPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('backup_after_sync', models.BooleanField()),
                ('method', models.CharField(max_length=20)),
                ('url', models.CharField(max_length=255, validators=[django.core.validators.URLValidator(schemes=['http', 'https'])])),
                ('ignore_rules', models.TextField(blank=True)),
                ('parameters', validity.fields.encrypted.EncryptedDictField(do_not_encrypt=('username', 'branch', 'aws_access_key_id'))),
                ('last_uploaded', models.DateTimeField(blank=True, editable=False, null=True)),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='validity.vdatasource')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Backup Point',
                'verbose_name_plural': 'Backup Points',
                'ordering': ('name',),
            },
            bases=(validity.models.base.SubformMixin, validity.models.base.URLMixin, models.Model),
        ),
    ]
