name: CI
on:
  push:
    branches: ["**"]
    tags-ignore: ["**"]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependecies
        run: pip install -r requirements/dev.txt
      - name: Run black
        run: black --check --diff --color validity/
      - name: Run isort
        run: isort --check --diff --color validity/
      - name: Run flake8
        run: flake8 validity/

  test:
    runs-on: ubuntu-latest
    env:
      cov_jq: >-
        {
          \"percent\": (.totals.percent_covered * 100 | round/100),
          \"color\": (if .totals.percent_covered < 80 then \"orange\" else \"green\" end)
        }
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Define .env
        run: cp development/.env.example development/.env 
      - name: docker version
        run: docker version && docker compose version
      - name: Build netbox
        run: cd development && docker compose build
      - name: Check missed migrations
        run: cd development && docker compose run netbox sh -c "./manage.py makemigrations --check --dry-run"
      - name: Run Tests
        run: cd development && docker compose run netbox sh -c "cd /plugin/validity && pytest --cov"
      - name: Extract Coverage Level
        id: covlevel
        if: always()
        run: cd development && docker compose run netbox sh -c  'cd /plugin/validity && coverage json -q -o /dev/stdout | jq '${{ env.cov_jq }}'"
      - name: Create Coverage Badge
        if: steps.covlevel.conclusion == 'success'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 9e518ae8babd18b7edd8ee5aad58146b
          filename: cov.json
          label: Coverage
          message: ${{ fromJSON(steps.covlevel.outputs).percent }}%
          color: ${{ fromJSON(steps.covlevel.outputs).color }}
